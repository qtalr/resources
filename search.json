[
  {
    "objectID": "guides/guide-01/index.html",
    "href": "guides/guide-01/index.html",
    "title": "1. Setting up an R environment",
    "section": "",
    "text": "Choosing to work with R locally means that you will install R and an IDE on your local computer. This approach offers the following advantages:\n\nFast and responsive performance\nNo reliance on internet connectivity\nFlexibility to customize your environment\n\nThe main disadvantages of working locally are:\n\nyou will need to install R and an IDE on your local computer,\nmanage your own software environment, and\nmanage your own backups and version control for collaborative projects.\n\nThis can be a challenge for new users, but there are a number of resources available to help you get started and troubleshoot any issues you may encounter.\nTo get started, install R from CRAN. You can download the latest version of R for your operating system here. Once you have installed R, you will need to install an IDE. For complete beginners, I recommend RStudio, a free and open-source IDE for R. RStudio provides a number of features that make it easier to work with R. If you are new to R, but have experience with other programming languages, you may prefer to use a more general-purpose IDE such as VS Code.\n\n\n\nYou can also choose to work with R in the cloud, a remote environment. There are a number of cloud-based options for working with R, including Posit Cloud and Microsoft Azure. These options provide a pre-configured R environment that you can access from any computer with an internet connection.\nPosit Cloud provides an environment where you can create, edit, and run R projects from anywhere with internet access. It offers several advantages:\n\nNo need to install R or RStudio locally\nAccess your projects from any device\nCollaborate with others in real-time\nEasily share your work\n\nSome of the drawbacks of working in the cloud include:\n\nReliance on stable internet connection\nPotential latency and performance issues\nLimited customization options compared to a local setup\n\nTo get started with Posit Cloud, you will need to create an account. You can sign up for a free account here. Once you have created an account, you will see a list of spaces. By default you will have your personal workspace, but you can also join or be invited to other spaces.\nVisit the Guide documentation to learn more about the features of Posit Cloud.\n\n\n\nIf you are new to R, you may want to consider working in the cloud to get started. If you plan to continue to work with R in the future, you will most likely want to install R and an IDE on your local computer or explore using a virtual environment. Virtual environments, such as Docker, provide a way to use a pre-configured computing environment or create your own that you can share with others. Virtual environments are a good option if you want to ensure that everyone in your research group is working with the same computing environment. Pre-configured virtual environments exist for R through the Rocker project and can be used locally or in the cloud.\nUsing Docker with Rocker offers several benefits:\n\nReproducible environments\nSimplified dependency management\nEasy deployment and scaling\n\nThe drawbacks to using Docker with Rocker include:\n\nLearning curve for setting up and managing Docker containers\nIncreased memory and resource requirements\nPotential compatibility issues with certain packages or libraries\n\nTo start using Docker with Rocker, follow these steps:\n\nInstall Docker on your local machine\nPull the desired Rocker image from Docker Hub\ndocker pull rocker/rstudio\nRun a container using the pulled image\ndocker run -d -p 8787:8787 -e PASSWORD=your_password --name rstudio_container rocker/rstudio\nAccess RStudio in your browser at http://localhost:8787 and log in with username rstudio and the password you set"
  },
  {
    "objectID": "guides/guide-01/index.html#environment-setups",
    "href": "guides/guide-01/index.html#environment-setups",
    "title": "1. Setting up an R environment",
    "section": "",
    "text": "Choosing to work with R locally means that you will install R and an IDE on your local computer. This approach offers the following advantages:\n\nFast and responsive performance\nNo reliance on internet connectivity\nFlexibility to customize your environment\n\nThe main disadvantages of working locally are:\n\nyou will need to install R and an IDE on your local computer,\nmanage your own software environment, and\nmanage your own backups and version control for collaborative projects.\n\nThis can be a challenge for new users, but there are a number of resources available to help you get started and troubleshoot any issues you may encounter.\nTo get started, install R from CRAN. You can download the latest version of R for your operating system here. Once you have installed R, you will need to install an IDE. For complete beginners, I recommend RStudio, a free and open-source IDE for R. RStudio provides a number of features that make it easier to work with R. If you are new to R, but have experience with other programming languages, you may prefer to use a more general-purpose IDE such as VS Code.\n\n\n\nYou can also choose to work with R in the cloud, a remote environment. There are a number of cloud-based options for working with R, including Posit Cloud and Microsoft Azure. These options provide a pre-configured R environment that you can access from any computer with an internet connection.\nPosit Cloud provides an environment where you can create, edit, and run R projects from anywhere with internet access. It offers several advantages:\n\nNo need to install R or RStudio locally\nAccess your projects from any device\nCollaborate with others in real-time\nEasily share your work\n\nSome of the drawbacks of working in the cloud include:\n\nReliance on stable internet connection\nPotential latency and performance issues\nLimited customization options compared to a local setup\n\nTo get started with Posit Cloud, you will need to create an account. You can sign up for a free account here. Once you have created an account, you will see a list of spaces. By default you will have your personal workspace, but you can also join or be invited to other spaces.\nVisit the Guide documentation to learn more about the features of Posit Cloud.\n\n\n\nIf you are new to R, you may want to consider working in the cloud to get started. If you plan to continue to work with R in the future, you will most likely want to install R and an IDE on your local computer or explore using a virtual environment. Virtual environments, such as Docker, provide a way to use a pre-configured computing environment or create your own that you can share with others. Virtual environments are a good option if you want to ensure that everyone in your research group is working with the same computing environment. Pre-configured virtual environments exist for R through the Rocker project and can be used locally or in the cloud.\nUsing Docker with Rocker offers several benefits:\n\nReproducible environments\nSimplified dependency management\nEasy deployment and scaling\n\nThe drawbacks to using Docker with Rocker include:\n\nLearning curve for setting up and managing Docker containers\nIncreased memory and resource requirements\nPotential compatibility issues with certain packages or libraries\n\nTo start using Docker with Rocker, follow these steps:\n\nInstall Docker on your local machine\nPull the desired Rocker image from Docker Hub\ndocker pull rocker/rstudio\nRun a container using the pulled image\ndocker run -d -p 8787:8787 -e PASSWORD=your_password --name rstudio_container rocker/rstudio\nAccess RStudio in your browser at http://localhost:8787 and log in with username rstudio and the password you set"
  },
  {
    "objectID": "guides/guide-01/index.html#summary",
    "href": "guides/guide-01/index.html#summary",
    "title": "1. Setting up an R environment",
    "section": "Summary",
    "text": "Summary\nIn this guide, we have discussed strategies for working with R. All three options offer unique advantages. In Table 1, we summarize some of the characteristics, benefits, and drawbacks of each option.\n\n\n\nTable 1: Comparison of different environments for working with R and RStudio\n\n\n\n\n\n\n\n\n\n\n\nEnvironment\nCharacteristics\nBenefits\nDrawbacks\n\n\n\n\nLocal (Computer)\n- R/RStudio installed locally- Project files stored on local machine- Accessible without internet connection- Full control over software version and environment\n- Fast and responsive performance- No reliance on internet connectivity- Ability to work offline- Complete control over software version and environment\n- Limited collaboration options- Difficulty in sharing projects with others- Potential compatibility issues with different operating systems\n\n\nRemote (Cloud)\n- R/RStudio accessed via web browser- Project files stored on cloud server- Accessible from any device with internet connection- Easy collaboration with others- Automatic backups and version control\n- No need for local installation or setup- Easy access from anywhere- Seamless collaboration with teammates- Backup and version control provided by the cloud service\n- Reliance on stable internet connection- Potential latency and performance issues- Limited customization options compared to a local setup\n\n\nVirtual (Docker)\n- R/RStudio environment encapsulated in a Docker container- Project files stored locally or on the cloud- Consistent environment across different machines\n- Reproducible and portable environment- Easy setup and sharing of the container- Flexibility to run on different operating systems- Isolation from host system dependencies\n- Learning curve for setting up and managing Docker containers- Increased memory and resource requirements- Potential compatibility issues with certain packages or libraries\n\n\n\n\n\n\nGive them a try and see which one works best for your needs! Remember, you can always switch between different environments as your needs change."
  },
  {
    "objectID": "guides/guide-01/index.html#references",
    "href": "guides/guide-01/index.html#references",
    "title": "1. Setting up an R environment",
    "section": "References",
    "text": "References"
  },
  {
    "objectID": "guides/guide-04/index.html",
    "href": "guides/guide-04/index.html",
    "title": "Guide 04",
    "section": "",
    "text": "Hello."
  },
  {
    "objectID": "guides/guide-02/index.html",
    "href": "guides/guide-02/index.html",
    "title": "Guide 02",
    "section": "",
    "text": "Hello."
  },
  {
    "objectID": "recipes/recipe-11/index.html",
    "href": "recipes/recipe-11/index.html",
    "title": "Recipe 11",
    "section": "",
    "text": "Hello."
  },
  {
    "objectID": "recipes/recipe-04/index.html",
    "href": "recipes/recipe-04/index.html",
    "title": "Recipe 04",
    "section": "",
    "text": "Hello."
  },
  {
    "objectID": "recipes/recipe-02/index.html",
    "href": "recipes/recipe-02/index.html",
    "title": "Recipe 02",
    "section": "",
    "text": "Hello."
  },
  {
    "objectID": "recipes/index.html",
    "href": "recipes/index.html",
    "title": "Recipes",
    "section": "",
    "text": "0. Literate Programming\n\n\nAn introduction to Quarto\n\n\nIn this recipe, we will introduce the concept of Literate Programming and describe how to implement this concept through Quarto. I will provide a demonstration of some of the features of Quarto and describe the main structural characteristics of a Quarto document to help you get off and running writing your own documents that combine code and prose. \n\n\n\n\n\n8 min\n\n\n1,430 words\n\n\n\n\n\n\n\n\n\n\n\n\n1. …\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n1 words\n\n\n\n\n\n\n\n\n\n\n\n\nRecipe 02\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n1 words\n\n\n\n\n\n\n\n\n\n\n\n\nRecipe 03\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n1 words\n\n\n\n\n\n\n\n\n\n\n\n\nRecipe 04\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n1 words\n\n\n\n\n\n\n\n\n\n\n\n\nRecipe 05\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n1 words\n\n\n\n\n\n\n\n\n\n\n\n\nRecipe 06\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n1 words\n\n\n\n\n\n\n\n\n\n\n\n\nRecipe 07\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n1 words\n\n\n\n\n\n\n\n\n\n\n\n\nRecipe 08\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n1 words\n\n\n\n\n\n\n\n\n\n\n\n\nRecipe 09\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n1 words\n\n\n\n\n\n\n\n\n\n\n\n\nRecipe 10\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n1 words\n\n\n\n\n\n\n\n\n\n\n\n\nRecipe 11\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n1 words\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "recipes/recipe-00/index.html",
    "href": "recipes/recipe-00/index.html",
    "title": "0. Literate Programming",
    "section": "",
    "text": "First introduced by Donald Knuth (1984), the aim of Literate Programming is to be able to combine computer code and text prose in one document. This allows an analyst to run code, view the output of the code, view the code itself, and provide prose description all in one document. In this way, a literate programming document allows for presenting your analysis in a way that performs the computing steps desired and presents it in an easily readable format. Literate programming is now a key component of creating and sharing reproducible research (Gandrud 2015).\n\n\n\nQuarto is a specific implementation of the literate programming paradigm. In Figure 1 we see an example of Quarto in action. On the left we see the Quarto source code, which is a combination of text and code. On the right we see the output of the Quarto source code as an HTML document.\n\n\n\n\n\n\n\n\nFigure 1: Quarto source (left) and output (right) example.\n\n\n\n\n\nQuarto documents generate various types of output: web documents (HTML), PDFs, Word documents, and many other types of output formats all based on the same source code. While the interleaving of code and prose to create a variety of output documents is one of the most attractive aspects of literate programming and Quarto, it is also possible to create documents with no code at all. It is a very versatile technology as you will come to appreciate.\n\n\n\n\n\n\n Dive deeper\nTo see Quarto in action, please check out the Quarto Gallery for a variety of examples of Quarto documents and their output.\n\n\n\nA Quarto source document is a plain-text file with the extension .qmd that can be opened in any plain text reader. We will be using the RStudio IDE (henceforth RStudio) to create, open, and edit, and generate output from .qmd files but any plain-text reader, such as TextEdit (MacOS) or Notepad (PC) can open these files.\nWith this in mind, let’s now move on to the anatomy of a Quarto document.\n\n\nAt the most basic level a Quarto document contains two components:\n\na front-matter section and\na prose section.\n\nA third component, a code block, can be interleaved within the prose section to add code to the document. Let’s look at each of these in turn.\n\n\nThe front matter of a Quarto document appears, well, at the front of the document (or the top, rather). Referring back to Figure Figure 1, we see the front matter at the top.\n---\ntitle: \"Introduction to Quarto\"\nauthor: \"Jerid Francom\"\nformat: html\n---\nWhen creating a Quarto document with RStudio the default attribute keys are title, author, and format. The front matter is fenced by three dashes ---.\nThe values for the first two keys are pretty straightforward and can be edited as needed. The value for the format attribute can also be edited to tell the .qmd file to generate other output types. Can you guess what value we might use to generate a PDF document? Yep, it’s just pdf. As we work Quarto you will learn more about how to use the RStudio interface to change some of these key-value pairs and add others!\n\n\n\nAnywhere below the front matter and not contained within a code block (see below) is open for prose. The prose section(s) have an added functionality in that they are Markdown aware. What does that mean, you say? Well, Markdown refers to a set of plain-text formatting conventions to produce formatted text in the output document. To quote Wikipedia:\n\nMarkdown is a lightweight markup language for creating formatted text using a plain-text editor. John Gruber and Aaron Swartz created Markdown in 2004 as a markup language that is appealing to human readers in its source code form. Markdown is widely used in blogging, instant messaging, online forums, collaborative software, documentation pages, and readme files.\n\nWhat this enables us to do is to add simple text conventions to signal how the output should be formatted. Say we want to make some text bold. We just add ** around the text we want to appear bold.\n**bold text**\nWe can also do:\n\nitalics *italics*\nlinks [links](http://wfu.edu)\nstrikethrough ~~strikethrough~~\netc.\n\nFollow this link find more information on basic Markdown syntax.\n\n\n\nCode blocks are where the R magic happens. Again, referring to Figure 1, we see that there is the following code block.\n```{r}\n1 + 1\n```\nA code block is bound by three backticks ```. After the first backticks the curly brackets {} allow us to tell Quarto which programming language to use to evaluate (i.e. run) in the code block. In most cases this will be R, hence the the opening curly bracket `{r}`. But there are other languages that can be used in Quarto, such as Python, SQL, and Bash.\nIn the previous example, R is used as a simple calculator adding 1 + 1. Here’s what this code block produces.\n\n1 + 1\n\n&gt; [1] 2\n\n\n```{r}\n#| label: add\n1 + 1\n```\nWe have only mentioned selecting the coding language and labeling the code block, but code blocks have various other options that can be used to determine how the code block should be used. Some common code block options are:\n\nhiding the code: #| echo: false\n\n```{r}\n#| label: add\n#| echo: false\n1 + 1\n```\n\n\n&gt; [1] 2\n\n\n\nhiding the output #| include: false\n\n```{r}\n#| label: add\n#| include: false\n1 + 1\n```\n\netc.\n\n\n\n\n\nThe easiest and most efficient way to create a Quarto source file is to use the RStudio point-and-click interface. Just use the toolbar to create a new file and select “Quarto Document…”, as seen in Figure 2.\n\n\n\n\n\n\n\n\nFigure 2: Creating a new Quarto document in RStudio.\n\n\n\n\n\nThis will provide you a dialogue box asking you to add a title and author to the document and also allows you to select the type of document format to output, as seen in Figure 3.\n\n\n\n\n\n\n\n\nFigure 3: Dialogue box for creating a new Quarto document in RStudio.\n\n\n\n\n\nEnter a title and author and leave the format set to HTML.\nOn clicking ‘Create’ you will get a Quarto document, as in Figure 4, with some default/ boilerplate prose and code blocks. The prose and code blocks can be deleted, and we can start our own document.\n\n\n\n\n\n\n\n\nFigure 4: Quarto source in RStudio.\n\n\n\n\n\nBut for now, let’s leave things as they are and see how to generate the output report from this document. Click “Render” in the RStudio toolbar. Before it will render, you will be asked to save the file and give it a name.\nOnce you have done that the .qmd file will render in the format you have specified and open in the ‘Viewer’ pane, as seen in Figure 5.\n\n\n\n\n\n\n\n\nFigure 5: Quarto source and HTML output side-by-side in RStudio.\n\n\n\n\n\n\n\n\n\n\n\n Dive deeper\nWatch Getting Started with Quarto for a guided tour of Quarto (Çetinkaya-Rundel 2023)."
  },
  {
    "objectID": "recipes/recipe-00/index.html#concepts-and-strategies",
    "href": "recipes/recipe-00/index.html#concepts-and-strategies",
    "title": "0. Literate Programming",
    "section": "",
    "text": "First introduced by Donald Knuth (1984), the aim of Literate Programming is to be able to combine computer code and text prose in one document. This allows an analyst to run code, view the output of the code, view the code itself, and provide prose description all in one document. In this way, a literate programming document allows for presenting your analysis in a way that performs the computing steps desired and presents it in an easily readable format. Literate programming is now a key component of creating and sharing reproducible research (Gandrud 2015).\n\n\n\nQuarto is a specific implementation of the literate programming paradigm. In Figure 1 we see an example of Quarto in action. On the left we see the Quarto source code, which is a combination of text and code. On the right we see the output of the Quarto source code as an HTML document.\n\n\n\n\n\n\n\n\nFigure 1: Quarto source (left) and output (right) example.\n\n\n\n\n\nQuarto documents generate various types of output: web documents (HTML), PDFs, Word documents, and many other types of output formats all based on the same source code. While the interleaving of code and prose to create a variety of output documents is one of the most attractive aspects of literate programming and Quarto, it is also possible to create documents with no code at all. It is a very versatile technology as you will come to appreciate.\n\n\n\n\n\n\n Dive deeper\nTo see Quarto in action, please check out the Quarto Gallery for a variety of examples of Quarto documents and their output.\n\n\n\nA Quarto source document is a plain-text file with the extension .qmd that can be opened in any plain text reader. We will be using the RStudio IDE (henceforth RStudio) to create, open, and edit, and generate output from .qmd files but any plain-text reader, such as TextEdit (MacOS) or Notepad (PC) can open these files.\nWith this in mind, let’s now move on to the anatomy of a Quarto document.\n\n\nAt the most basic level a Quarto document contains two components:\n\na front-matter section and\na prose section.\n\nA third component, a code block, can be interleaved within the prose section to add code to the document. Let’s look at each of these in turn.\n\n\nThe front matter of a Quarto document appears, well, at the front of the document (or the top, rather). Referring back to Figure Figure 1, we see the front matter at the top.\n---\ntitle: \"Introduction to Quarto\"\nauthor: \"Jerid Francom\"\nformat: html\n---\nWhen creating a Quarto document with RStudio the default attribute keys are title, author, and format. The front matter is fenced by three dashes ---.\nThe values for the first two keys are pretty straightforward and can be edited as needed. The value for the format attribute can also be edited to tell the .qmd file to generate other output types. Can you guess what value we might use to generate a PDF document? Yep, it’s just pdf. As we work Quarto you will learn more about how to use the RStudio interface to change some of these key-value pairs and add others!\n\n\n\nAnywhere below the front matter and not contained within a code block (see below) is open for prose. The prose section(s) have an added functionality in that they are Markdown aware. What does that mean, you say? Well, Markdown refers to a set of plain-text formatting conventions to produce formatted text in the output document. To quote Wikipedia:\n\nMarkdown is a lightweight markup language for creating formatted text using a plain-text editor. John Gruber and Aaron Swartz created Markdown in 2004 as a markup language that is appealing to human readers in its source code form. Markdown is widely used in blogging, instant messaging, online forums, collaborative software, documentation pages, and readme files.\n\nWhat this enables us to do is to add simple text conventions to signal how the output should be formatted. Say we want to make some text bold. We just add ** around the text we want to appear bold.\n**bold text**\nWe can also do:\n\nitalics *italics*\nlinks [links](http://wfu.edu)\nstrikethrough ~~strikethrough~~\netc.\n\nFollow this link find more information on basic Markdown syntax.\n\n\n\nCode blocks are where the R magic happens. Again, referring to Figure 1, we see that there is the following code block.\n```{r}\n1 + 1\n```\nA code block is bound by three backticks ```. After the first backticks the curly brackets {} allow us to tell Quarto which programming language to use to evaluate (i.e. run) in the code block. In most cases this will be R, hence the the opening curly bracket `{r}`. But there are other languages that can be used in Quarto, such as Python, SQL, and Bash.\nIn the previous example, R is used as a simple calculator adding 1 + 1. Here’s what this code block produces.\n\n1 + 1\n\n&gt; [1] 2\n\n\n```{r}\n#| label: add\n1 + 1\n```\nWe have only mentioned selecting the coding language and labeling the code block, but code blocks have various other options that can be used to determine how the code block should be used. Some common code block options are:\n\nhiding the code: #| echo: false\n\n```{r}\n#| label: add\n#| echo: false\n1 + 1\n```\n\n\n&gt; [1] 2\n\n\n\nhiding the output #| include: false\n\n```{r}\n#| label: add\n#| include: false\n1 + 1\n```\n\netc.\n\n\n\n\n\nThe easiest and most efficient way to create a Quarto source file is to use the RStudio point-and-click interface. Just use the toolbar to create a new file and select “Quarto Document…”, as seen in Figure 2.\n\n\n\n\n\n\n\n\nFigure 2: Creating a new Quarto document in RStudio.\n\n\n\n\n\nThis will provide you a dialogue box asking you to add a title and author to the document and also allows you to select the type of document format to output, as seen in Figure 3.\n\n\n\n\n\n\n\n\nFigure 3: Dialogue box for creating a new Quarto document in RStudio.\n\n\n\n\n\nEnter a title and author and leave the format set to HTML.\nOn clicking ‘Create’ you will get a Quarto document, as in Figure 4, with some default/ boilerplate prose and code blocks. The prose and code blocks can be deleted, and we can start our own document.\n\n\n\n\n\n\n\n\nFigure 4: Quarto source in RStudio.\n\n\n\n\n\nBut for now, let’s leave things as they are and see how to generate the output report from this document. Click “Render” in the RStudio toolbar. Before it will render, you will be asked to save the file and give it a name.\nOnce you have done that the .qmd file will render in the format you have specified and open in the ‘Viewer’ pane, as seen in Figure 5.\n\n\n\n\n\n\n\n\nFigure 5: Quarto source and HTML output side-by-side in RStudio.\n\n\n\n\n\n\n\n\n\n\n\n Dive deeper\nWatch Getting Started with Quarto for a guided tour of Quarto (Çetinkaya-Rundel 2023)."
  },
  {
    "objectID": "recipes/recipe-00/index.html#check-your-understanding",
    "href": "recipes/recipe-00/index.html#check-your-understanding",
    "title": "0. Literate Programming",
    "section": "Check your understanding",
    "text": "Check your understanding\n\nTRUEFALSE Literate Programming, first introduced by Donald Knuth in 1984, allows the combination of computer code and text prose in one document.\nThe programming paradigm Literate Programming is implemented through QuartoRRStudioGitHub, a platform that facilitates the creation of a variety of output documents based on the same source code.\nWhich of the following components does a basic Quarto document not contain? Front-matter sectionProse sectionBack-matter sectionCode block\nTo generate a PDF document in Quarto, you can edit the format attribute value in the front-matter section to .\nTRUEFALSE The code block options echo and include can be used to hide the code and output, respectively.\nTRUEFALSE In Quarto, a code block, where the programming language code is entered, is bounded by three underscores (_)."
  },
  {
    "objectID": "recipes/recipe-00/index.html#lab-preparation",
    "href": "recipes/recipe-00/index.html#lab-preparation",
    "title": "0. Literate Programming",
    "section": "Lab preparation",
    "text": "Lab preparation\nThis concludes our introduction to literate programming using Quarto. We have covered the basics there but there is much more to explore.\nIn preparation for Lab 0, ensure that you have completed the following:\n\nSetup your computing environment with R and RStudio\nInstalled the necessary packages:\n\nquarto\ntinytex\n\n\nand that you are prepared to do the following:\n\nOpen RStudio and understand the basic interface\nCreate, edit, and render Quarto documents\nUse some basic Markdown syntax to format text\n\nWith this in mind, you are ready to move on to Lab 00."
  },
  {
    "objectID": "recipes/recipe-06/index.html",
    "href": "recipes/recipe-06/index.html",
    "title": "Recipe 06",
    "section": "",
    "text": "Hello."
  },
  {
    "objectID": "recipes/recipe-08/index.html",
    "href": "recipes/recipe-08/index.html",
    "title": "Recipe 08",
    "section": "",
    "text": "Hello."
  },
  {
    "objectID": "instructors.html#materials",
    "href": "instructors.html#materials",
    "title": "Instructors",
    "section": "Materials",
    "text": "Materials\n\nSlide decks\n\n\nExercises"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "recipes/recipe-01/index.html",
    "href": "recipes/recipe-01/index.html",
    "title": "1. …",
    "section": "",
    "text": "Hello."
  },
  {
    "objectID": "recipes/recipe-07/index.html",
    "href": "recipes/recipe-07/index.html",
    "title": "Recipe 07",
    "section": "",
    "text": "Hello."
  },
  {
    "objectID": "recipes/recipe-09/index.html",
    "href": "recipes/recipe-09/index.html",
    "title": "Recipe 09",
    "section": "",
    "text": "Hello."
  },
  {
    "objectID": "recipes/recipe-05/index.html",
    "href": "recipes/recipe-05/index.html",
    "title": "Recipe 05",
    "section": "",
    "text": "Hello."
  },
  {
    "objectID": "recipes/recipe-03/index.html",
    "href": "recipes/recipe-03/index.html",
    "title": "Recipe 03",
    "section": "",
    "text": "Hello."
  },
  {
    "objectID": "recipes/recipe-10/index.html",
    "href": "recipes/recipe-10/index.html",
    "title": "Recipe 10",
    "section": "",
    "text": "Hello."
  },
  {
    "objectID": "guides/guide-05/index.html",
    "href": "guides/guide-05/index.html",
    "title": "Guide 05",
    "section": "",
    "text": "Hello."
  },
  {
    "objectID": "guides/guide-03/index.html",
    "href": "guides/guide-03/index.html",
    "title": "Guide 03",
    "section": "",
    "text": "Hello."
  },
  {
    "objectID": "guides/index.html",
    "href": "guides/index.html",
    "title": "Guides",
    "section": "",
    "text": "1. Setting up an R environment\n\n\n\n\n\nIn this guide, we will explore options for setting up an R environment. We will discuss local, remote, and virtual environments. Each have their own advantages and shortcomings. The best option for you will depend on your needs and preferences. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGuide 02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGuide 03\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGuide 04\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGuide 05\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  }
]