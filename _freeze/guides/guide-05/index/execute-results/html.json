{
  "hash": "b5b3bd9049ac8387d2f62b0962776c4c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"05. Creating reproducible examples\"\nsubtitle: \"\"\ndescription: |\n  In this guide, we will explore how to create reproducible examples using the {reprex}. Reproducible examples are essential for effective communication and collaboration among data scientists and statisticians.\ncategories: [guides]\n---\n\n\n::: {.callout}\n**{{< fa regular list-alt >}} Outcomes**\n<!-- [ ] add reprex outcomes -->\n<!-- Remember and understand verbs: https://tips.uark.edu/blooms-taxonomy-verb-chart/ -->\n\n-\n:::\n\n\n<!-- - [How to make a great R reproducible example](https://stackoverflow.com/questions/5963269/how-to-make-a-great-r-reproducible-example) -->\n\n## Introduction\n\n### What is a reproducible example?\n\nReproducible examples are crucial for effectively communicating problems, solutions, and ideas in the world of data science. In this post, we will discuss the importance of reproducible examples and demonstrate how to create them using {reprex} [@R-reprex] in R\n\nA reproducible example, often referred to as a \"reprex,\" is a minimal, self-contained piece of code that demonstrates a specific issue or concept. It should include:\n\n* A brief description of the problem or question\n* The necessary data to reproduce the issue\n* The R code used to generate the output\n* The actual output, including any error messages or warnings\n\n### Why use {reprex}?\n\n{reprex} in R streamlines the process of creating reproducible examples by:\n\n* Automatically capturing code, input data, and output\n* Formatting the example for easy sharing on various platforms (e.g., GitHub, Stack Overflow)\n* Encouraging best practices for creating clear and concise examples\n\n### Installing and loading {reprex}\n\nTo get started with {reprex}, first install it from CRAN and load it into your R session:\n\n```r\ninstall.packages(\"reprex\")\nlibrary(reprex)\n```\n\n## Creating a reproducible example with {reprex}\n\nIn this section, we will demonstrate how to create a reproducible example using {reprex}.\n\n### Basic usage\n\nTo create a simple reprex, write your R code and then call the `reprex()` function:\n\n```r\nlibrary(reprex)\n\ncode <- '\nx <- 1:10\nmean(x)\n'\n\nreprex(input = code)\n```\n\nThis will generate a formatted output that includes the code, input data, and results.\n\n### Customizing output format\n\nYou can customize the output format of your reprex by specifying the `venue` argument. For example, to create a reprex suitable for GitHub, use:\n\n```r\nreprex(input = code, venue = \"gh\")\n```\n\n### Including data/ datasets\n\nWhen your example requires specific data, you can include it using the `dput()` function:\n\n```r\ndata <- data.frame(x = 1:10, y = 11:20)\ndata_dput <- dput(data)\n\ncode_with_data <- '\ndata <- {{ data_dput }}\nplot(data$x, data$y)\n'\n\nreprex(input = code_with_data)\n```\n\nThis will incorporate the data into your reprex, allowing others to reproduce your example easily.\n\n### Sharing your reproducible example\n\nOnce you have created your reprex, you can share it on various platforms such as GitHub, Stack Overflow, or via email. The formatted output generated by {reprex} ensures that your example is easy to read and understand.\n\n## Conclusion\n\nIn this blog post, we have discussed the importance of reproducible examples and demonstrated how to create them using {reprex} in R. By creating clear and concise reprexes, you can effectively communicate problems, solutions, and ideas with your peers and collaborators. Give {reprex} a try and see how it can improve your workflow!\n\n## References\n\n\n----\n\n-   StackOverflow: [R](https://stackoverflow.com/questions/tagged/r), [Git](https://stackoverflow.com/questions/tagged/git), [RStudio](https://stackoverflow.com/questions/tagged/rstudio), [GitHub](https://stackoverflow.com/questions/tagged/github)\n-   Reddit: [R](https://www.reddit.com/r/rstats/), [Git](https://www.reddit.com/r/git/), [RStudio](https://www.reddit.com/r/RStudio/), [Github](https://www.reddit.com/r/github/)\n-   [RStudio Community](https://community.rstudio.com/)\n\n\n-   https://reprex.tidyverse.org/\n\n-   https://github.com/MilesMcBain/datapasta\n\n<!--\n- [ ] Work on reprex example with/without RStudio?\n- [ ] Example of a reprex on StackOverflow: https://stackoverflow.com/questions/5963269/how-to-make-a-great-r-reproducible-example\n -->\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"reprex\") # install reprex package\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector with 100 random values from the normal distribution\nset.seed(123) # set seed for reproducibility\nmy_vec <- rnorm(100) # random normal vector\n\nsummary(my_vec) # 5 number summary\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nreprex::reprex() # run reprex\n```\n:::\n\n\nDatapasta is a package that allows you to copy and paste data frames from RStudio into a reprex. This is a very useful tool for creating reproducible examples. Here is an example of how to use datapasta to create a reprex.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install the datapasta package\ninstall.packages(\"datapasta\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the datapasta package\nlibrary(datapasta)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a data frame with 100 random values from the normal distribution\nset.seed(123) # set seed for reproducibility\nmy_df <- data.frame(x = rnorm(100)) # random normal data frame\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# copy the data frame to the clipboard\ndpasta(my_df)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}