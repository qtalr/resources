{
  "hash": "b8f29ee7f250ca7b07faf618b9baf5f9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"05. Creating reproducible examples\"\nsubtitle: \"Helping you help yourself\"\ndescription: |\n  In this guide, we will explore how to create reproducible examples using {reprex}. Reproducible examples are essential for effective communication and collaboration among data scientists and statisticians.\ncategories: [guides]\n---\n\n\n::: {.callout}\n**{{< fa regular list-alt >}} Outcomes**\n\n- Understand the importance of reproducible examples\n- Create a reproducible example using {reprex} and other tools\n- Share your reproducible example with others\n:::\n\n## Introduction\n\n### What is a reproducible example?\n\nReproducible examples are crucial for effectively communicating problems, solutions, and ideas in the world of data science. In most cases, a simple description of an issue or concept is not enough to convey the full context of the problem. A reproducible example provides a minimal, self-contained piece of code (and other relevant resources) that demonstrates a specific issue or concept. It includes:\n\n- A brief description of the problem or question and the expected output\n- The necessary (and only the necessary) data to reproduce the issue\n- The R code used to generate the output\n- The actual output, including any error messages or warnings\n\n### Why are reproducible examples important?\n\nYou may very well understand the problem you are facing, but others likely will not. By providing sufficient context to understand the problem, you can increase the likelihood of receiving a helpful response. Another reason to create reproducible examples is to help you think through the problem more clearly. By creating a minimal example, you may discover the source of the problem yourself!\n\n### Create a reproducible example\n\nThe trickiest part of asking a question about R code is often not the question itself, but providing this information in a self-contained, reproducible example. Luckily, there are a few R packages that provide tools to help you create reproducible examples. {reprex}[@R-reprex], {datapasta}[@R-datapasta], and creative uses of {knitr} and base R functions can help you create reproducible examples.\n\n| Package | Description | Use case |\n|---------|-------------|----------|\n| {reprex} | Creates reproducible examples | General use |\n| {datapasta} | Copy and paste data frames | Data manipulation |\n| {knitr} | Swiss Army knife of rendering | Extract code from literate programming documents (*i.e.* Quarto) |\n| Base R functions | `dput()`, `dump()`, `sessionInfo()` | Represent data as text and report environment settings |\n\n: Package options for creating reproducible examples {#tbl-reprex-packages}\n\nIn this guide, we will focus on using {reprex} to create reproducible examples. {reprex} is a powerful tool\nthat captures R code, input data, and output in a formatted output that can be easily shared with others. Let's\ndive in!\n\n## Building blocks\n\n### Formatting code and code output\n\nLet's run through the building blocks of producing a reproducible example. Let's start with a simple example.\nWe'll start with the following R code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(stringr)\n# Sentences to tokenize\nx <- c(\"This is a sentence.\", \"This is another sentence.\")\n# Tokenize the sentences\nstringr::str_split(x, \" \")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"This\"      \"is\"        \"a\"         \"sentence.\"\n\n[[2]]\n[1] \"This\"      \"is\"        \"another\"   \"sentence.\"\n```\n\n\n:::\n:::\n\n\nFirst, we need to describe the problem or question the code attempts to address. In this case, we are trying to tokenize the sentences in the vector `x`. We should also include the expected output as part of the description. Here, the code functions without an error, but it does not seem to produce the desired output. On the one hand, punctuation is not removed and the words are not lowercased. On the other hand, the output is returned in a data structure we may not be familiar with --we'd like to see a data frame with one word per row. Something like this:\n\nSo our description could be:\n\n> I am trying to tokenize the sentences in the vector `x`. The expected output is a data frame with one word per\n> row, where punctuation is removed and words are lowercased. The output should look like something like this:\n>\n>\n> | token    |\n> |----------|\n> | this     |\n> | is       |\n> | a        |\n> | sentence |\n>\n\nNext, we need to include the necessary R code to reproduce the issue. This is where the {reprex} package comes in handy. We can use the `reprex()` function to create a reproducible example from the code. The `reprex()` function will capture the code, input data, and output in a formatted output that can be easily shared with others.\n\nTo capture our example code, we first need to load {reprex} in our R session:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reprex)\n```\n:::\n\n\nNext, we need to select and copy the code we want to include in the reproducible example. We can then call the\n`reprex()` function to create the example:\n\n```{.r}\nreprex()\n```\n\n\n::: {.cell}\n\n:::\n\n\n`reprex()` will find the code we copied to the clipboard, run the code, and will generate a formatted output that includes the code, input data, and results. The output will be displayed in either a browser or preview pane and copied to the clipboard for easy sharing.\n\nHere is the output of the code from the clipboard:\n\n````{.md}\n```r\n# Load packages\n  library(stringr)\n    # Sentences to tokenize\n      x <- c(\"This is a sentence.\", \"This is another sentence.\")\n        # Tokenize the sentences\n          stringr::str_split(x, \" \")\n#> [[1]]\n#> [1] \"This\"      \"is\"        \"a\"         \"sentence.\"\n#>\n#> [[2]]\n#> [1] \"This\"      \"is\"        \"another\"   \"sentence.\"\n\n<sup>Created on 2024-06-23 with [reprex v2.1.0](https://reprex.tidyverse.org)</sup>\n```\n````\n\nThe default output of `reprex()` is a markdown document that can be shared on various platforms such\nas GitHub, Stack Overflow, or any other markdown-enabled site. The formatted output makes it easy for others to understand the problem and provide a solution. If you plan to share the output on a platform that does not support markdown, you can use the `venue` argument to specify a different output format. For example, to can get the reprex formatted as:\n\n- `r` for plain text\n- `rtf` for rich text format\n- `html` for HTML\n\nSo for example, to create a reprex formatted as plain text, you can use:\n\n```{.r}\nreprex(venue = \"r\")\n```\n\nThis is a handy output if you want to share a code snippet in an email or a chat message!\n\n### Including data\n\nIn the previous example, our 'data' was the vector `x`. In more complex examples, you may need to include data\nframes or other data structures. Let's say we are working on some code that aims to read some data from a file which has two columns `doc_id` and `text`, and calculate the number of words per document. The code we've written so far is giving us an error, and we need help from the community to debug it.\n\nThe code we have so far is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(tidyverse)\nlibrary(tidytext)\n\n# Read the text file\ndata <- read_csv(\"data/text.csv\")\n\n# Tokenize the text\ntokens_tbl <-\n  data |>\n  unnest_tokens(word, text) |>\n  count(word) |>\n  group_by(doc_id) |>\n  summarize(doc_words = n())\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nThis code produces the following error:\n\n```{.plain}\nError in `group_by()`:\n! Must group by variables found in `.data`.\n✖ Column `doc_id` is not found.\nRun `rlang::last_trace()` to see where the error occurred.\n```\n\nIn this case, we need to include a relevant dataset that can be used to reproduce the error. Now, the first\nthing we should do is to consider if there are any built-in datasets that can be used to reproduce the error.\nIt is always easier use a dataset that is comes with R, as it is readily available to everyone. If there is no\n(easily accessible) built-in dataset that can be used, we can add our own data to the reprex. Ideally, we should include the smallest amount of data that is necessary to reproduce the error.\n\nTo get a better understanding how we might proceed, let's take a quick look at the data we are working with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   doc_id text                                                                \n    <dbl> <chr>                                                               \n 1      1 The Sapir-Whorf hypothesis suggests language influences thought.    \n 2      2 Cognitive dissonance occurs when beliefs contradict behaviors.      \n 3      3 Plato's allegory of the cave explores perception vs. reality.       \n 4      4 Object-oriented programming focuses on creating reusable code.      \n 5      5 Chomsky's universal grammar theory proposes innate language ability.\n 6      6 The bystander effect explains reduced helping in crowds.            \n 7      7 Descartes' 'I think, therefore I am' establishes existence.         \n 8      8 Machine learning algorithms improve with more data.                 \n 9      9 Phonemes are the smallest units of sound in language.               \n10     10 The halting problem proves some computations are undecidable.       \n```\n\n\n:::\n:::\n\n\nFrom the output, we can see that the data has two columns: `doc_id` and `text`. We can create a small data\nframe with this structure to include in the reprex. We can use the `tribble()` function from the {tibble}\npackage to create the data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a small data frame\ndata <- tibble::tribble(\n  ~doc_id, ~text,\n  1, \"This is a sentence.\",\n  2, \"This is another sentence.\"\n)\n\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  doc_id text                     \n   <dbl> <chr>                    \n1      1 This is a sentence.      \n2      2 This is another sentence.\n```\n\n\n:::\n:::\n\n\nNow that we have the code to create some sample data, we can replace the call to the `read_csv()` function with\nthe code to create the data frame. Copy the new code to the clipboard and run `reprex()` again to create a new\nreproducible example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(tidyverse)\nlibrary(tidytext)\n\n# Create a small data frame\ndata <- tibble::tribble(\n  ~doc_id, ~text,\n  1, \"This is a sentence.\",\n  2, \"This is another sentence.\"\n)\n\n# Tokenize the text\ntokens_tbl <-\n  data |>\n  unnest_tokens(word, text) |>\n  count(word) |>\n  group_by(doc_id) |>\n  summarize(doc_words = n())\n```\n:::\n\nWe the default setting for markdown output, the reprex will look like this:\n\n````{.md}\n\n```r\n# Load packages\nlibrary(tidyverse)\nlibrary(tidytext)\n\n# Create a small data frame\ndata <- tibble::tribble(\n  ~doc_id, ~text,\n  1, \"This is a sentence.\",\n  2, \"This is another sentence.\"\n)\n\n# Tokenize the text\ntokens_tbl <-\n  data |>\n  unnest_tokens(word, text) |>\n  count(word) |>\n  group_by(doc_id) |>\n  summarize(doc_words = n())\n#> Error in `group_by()`:\n#> ! Must group by variables found in `.data`.\n#> ✖ Column `doc_id` is not found.\n```\n\n<sup>Created on 2024-06-23 with [reprex v2.1.0](https://reprex.tidyverse.org)</sup>\n\n````\n\n### Including session information\n\nAnother piece of information that can prove key to solving a problem is the R session information. This\ninformation describes some important details about your particular R environment. If others are not able to\nreproduce the error, the session information can help them understand the context in which the error occurred.\nIt's not always the case that the code itself is the problem, necessarily, but rather the mismatch between the\ncode and the environment in which it is run.\n\nConviently, the `reprex()` function can also include the session information in the output. The argument\n`session_info = TRUE` will include the session information in the output. This can be a lot of information, but\ndon't worry, it is common practice to include this information in a reprex.\n\nHere is an example of how to include the session information in the reprex:\n\n```{.r}\nreprex(session_info = TRUE)\n```\n\nNow, the reprex will include the session information at the end of the output. As an example, I'll include the session information in a (formatted) reprex:\n\n```r\n# Load packages\nlibrary(tidyverse)\nlibrary(tidytext)\n\n# Create a small data frame\ndata <- tibble::tribble(\n  ~doc_id, ~text,\n  1, \"This is a sentence.\",\n  2, \"This is another sentence.\"\n)\n\n# Tokenize the text\ntokens_tbl <-\n  data |>\n  unnest_tokens(word, text) |>\n  count(word) |>\n  group_by(doc_id) |>\n  summarize(doc_words = n())\n#> Error in `group_by()`:\n#> ! Must group by variables found in `.data`.\n#> ✖ Column `doc_id` is not found.\n```\n\n<sup>Created on 2024-06-23 with [reprex v2.1.0](https://reprex.tidyverse.org)</sup>\n\n<details style=\"margin-bottom:10px;\">\n<summary>\nSession info\n</summary>\n\n``` r\nsessioninfo::session_info()\n#> ─ Session info ───────────────────────────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.4.1 (2024-06-14)\n#>  os       macOS Sonoma 14.5\n#>  system   aarch64, darwin23.4.0\n#>  ui       unknown\n#>  language (EN)\n#>  collate  en_US.UTF-8\n#>  ctype    en_US.UTF-8\n#>  tz       America/New_York\n#>  date     2024-06-23\n#>  pandoc   3.2 @ /opt/homebrew/bin/ (via rmarkdown)\n#>\n#> ─ Packages ───────────────────────────────────────────────────────────────────\n#>  package     * version date (UTC) lib source\n#>  cli           3.6.2   2023-12-11 [1] CRAN (R 4.4.0)\n#>  colorspace    2.1-0   2023-01-23 [1] CRAN (R 4.4.0)\n#>  digest        0.6.35  2024-03-11 [1] CRAN (R 4.4.0)\n#>  dplyr       * 1.1.4   2023-11-17 [1] CRAN (R 4.4.0)\n#>  evaluate      0.24.0  2024-06-10 [1] CRAN (R 4.4.0)\n#>  fansi         1.0.6   2023-12-08 [1] CRAN (R 4.4.0)\n#>  fastmap       1.2.0   2024-05-15 [1] CRAN (R 4.4.0)\n#>  forcats     * 1.0.0   2023-01-29 [1] CRAN (R 4.4.0)\n#>  fs            1.6.4   2024-04-25 [1] CRAN (R 4.4.0)\n#>  generics      0.1.3   2022-07-05 [1] CRAN (R 4.4.0)\n#>  ggplot2     * 3.5.1   2024-04-23 [1] CRAN (R 4.4.0)\n#>  glue          1.7.0   2024-01-09 [1] CRAN (R 4.4.0)\n#>  gtable        0.3.5   2024-04-22 [1] CRAN (R 4.4.0)\n#>  hms           1.1.3   2023-03-21 [1] CRAN (R 4.4.0)\n#>  htmltools     0.5.8.1 2024-04-04 [1] CRAN (R 4.4.0)\n#>  janeaustenr   1.0.0   2022-08-26 [1] CRAN (R 4.4.0)\n#>  knitr         1.47    2024-05-29 [1] CRAN (R 4.4.0)\n#>  lattice       0.22-6  2024-03-20 [3] CRAN (R 4.4.1)\n#>  lifecycle     1.0.4   2023-11-07 [1] CRAN (R 4.4.0)\n#>  lubridate   * 1.9.3   2023-09-27 [1] CRAN (R 4.4.0)\n#>  magrittr      2.0.3   2022-03-30 [1] CRAN (R 4.4.0)\n#>  Matrix        1.7-0   2024-04-26 [3] CRAN (R 4.4.1)\n#>  munsell       0.5.1   2024-04-01 [1] CRAN (R 4.4.0)\n#>  pillar        1.9.0   2023-03-22 [1] CRAN (R 4.4.0)\n#>  pkgconfig     2.0.3   2019-09-22 [1] CRAN (R 4.4.0)\n#>  purrr       * 1.0.2   2023-08-10 [1] CRAN (R 4.4.0)\n#>  R.cache       0.16.0  2022-07-21 [1] CRAN (R 4.4.0)\n#>  R.methodsS3   1.8.2   2022-06-13 [1] CRAN (R 4.4.0)\n#>  R.oo          1.26.0  2024-01-24 [1] CRAN (R 4.4.0)\n#>  R.utils       2.12.3  2023-11-18 [1] CRAN (R 4.4.0)\n#>  R6            2.5.1   2021-08-19 [1] CRAN (R 4.4.0)\n#>  Rcpp          1.0.12  2024-01-09 [1] CRAN (R 4.4.0)\n#>  readr       * 2.1.5   2024-01-10 [1] CRAN (R 4.4.0)\n#>  reprex        2.1.0   2024-01-11 [1] CRAN (R 4.4.0)\n#>  rlang         1.1.4   2024-06-04 [1] CRAN (R 4.4.0)\n#>  rmarkdown     2.27    2024-05-17 [1] CRAN (R 4.4.0)\n#>  scales        1.3.0   2023-11-28 [1] CRAN (R 4.4.0)\n#>  sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.4.0)\n#>  SnowballC     0.7.1   2023-04-25 [1] CRAN (R 4.4.0)\n#>  stringi       1.8.4   2024-05-06 [1] CRAN (R 4.4.0)\n#>  stringr     * 1.5.1   2023-11-14 [1] CRAN (R 4.4.0)\n#>  styler        1.10.3  2024-04-07 [1] CRAN (R 4.4.0)\n#>  tibble      * 3.2.1   2023-03-20 [1] CRAN (R 4.4.0)\n#>  tidyr       * 1.3.1   2024-01-24 [1] CRAN (R 4.4.0)\n#>  tidyselect    1.2.1   2024-03-11 [1] CRAN (R 4.4.0)\n#>  tidytext    * 0.4.2   2024-04-10 [1] CRAN (R 4.4.0)\n#>  tidyverse   * 2.0.0   2023-02-22 [1] CRAN (R 4.4.0)\n#>  timechange    0.3.0   2024-01-18 [1] CRAN (R 4.4.0)\n#>  tokenizers    0.3.0   2022-12-22 [1] CRAN (R 4.4.0)\n#>  tzdb          0.4.0   2023-05-12 [1] CRAN (R 4.4.0)\n#>  utf8          1.2.4   2023-10-22 [1] CRAN (R 4.4.0)\n#>  vctrs         0.6.5   2023-12-01 [1] CRAN (R 4.4.0)\n#>  withr         3.0.0   2024-01-16 [1] CRAN (R 4.4.0)\n#>  xfun          0.44    2024-05-15 [1] CRAN (R 4.4.0)\n#>  yaml          2.3.8   2023-12-11 [1] CRAN (R 4.4.0)\n#>\n#>  [1] /Users/francojc/R/Library\n#>  [2] /opt/homebrew/lib/R/4.4/site-library\n#>  [3] /opt/homebrew/Cellar/r/4.4.1/lib/R/library\n#>\n#> ──────────────────────────────────────────────────────────────────────────────\n```\n\n</details>\n\n## Conclusion\n\nIn this guide, we have discussed the importance of reproducible examples and demonstrated how to create them using {reprex} in R. By creating clear and concise reprexes, you can effectively communicate problems, solutions, and ideas with your peers and collaborators. Give {reprex} a try and see how it can improve your workflow!\n\n## References\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}