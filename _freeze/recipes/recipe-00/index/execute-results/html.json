{
  "hash": "87e4dc3e9c1f2accbff6a69af450889d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"00. Literate Programming\"\nsubtitle: \"An introduction to Quarto\"\ndescription: |\n  In this recipe, we will introduce the concept of Literate Programming and describe how to implement this concept through Quarto. I will provide a demonstration of some of the features of Quarto and describe the main structural characteristics of a Quarto document to help you get off and running writing your own documents that combine code and prose.\ncategories: [preface]\nexecute:\n  echo: false\n---\n\n\n\n\n\n::: {.callout}\n**{{< fa regular list-alt >}} Skills**\n\n- Identify the main components of a Quarto document\n- Create and render a Quarto document\n- Modify front-matter and prose sections\n:::\n\n## Concepts and strategies\n\n### Literate Programming\n\nFirst introduced by Donald Knuth [-@Knuth1984], the aim of Literate Programming is to be able to combine computer code and text prose in one document. This allows an analyst to run code, view the output of the code, view the code itself, and provide prose description all in one document. In this way, a literate programming document allows for presenting your analysis in a way that performs the computing steps desired and presents it in an easily readable format. Literate programming is now a key component of creating and sharing reproducible research [@Gandrud2015].\n\n### Quarto\n\n[Quarto](https://quarto.org/) is a specific implementation of the literate programming paradigm. In @fig-image-quarto-preview we see an example of Quarto in action. On the left we see the Quarto source code, which is a combination of text and code. On the right we see the output of the Quarto source code as an HTML document.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Quarto source (left) and output (right) example.](images/quarto-preview.png){#fig-image-quarto-preview fig-alt='An image with two document views. On the left is Quarto source code and on the right is Quarto HTML output.' width=1814}\n:::\n:::\n\n\nQuarto documents generate various types of output: web documents (HTML), PDFs, Word documents, and many other types of output formats all based on the same source code. While the interleaving of code and prose to create a variety of output documents is one of the most attractive aspects of literate programming and Quarto, it is also possible to create documents with no code at all. It is a very versatile technology as you will come to appreciate.\n\n::: {.callout .halfsize}\n**{{< fa medal >}} Dive deeper**\n\nTo see Quarto in action, please check out the [Quarto Gallery](https://quarto.org/docs/gallery/) for a variety of examples of Quarto documents and their output.\n:::\n\nA Quarto source document is a plain-text file with the extension `.qmd` that can be opened in any plain text reader. We will be using the RStudio IDE (henceforth RStudio) to create, open, and edit, and generate output from `.qmd` files but any plain-text reader, such as TextEdit (MacOS) or Notepad (PC) can open these files.\n\nWith this in mind, let's now move on to the anatomy of a Quarto document.\n\n#### Anatomy of a Quarto Document\n\nAt the most basic level a Quarto document contains two components:\n\n1. a front-matter section and\n2. a prose section.\n\nA third component, a code block, can be interleaved within the prose section to add code to the document. Let's look at each of these in turn.\n\n##### Front-matter\n\nThe front matter of a Quarto document appears, well, at the front of the document (or the top, rather). Referring back to Figure @fig-image-quarto-preview, we see the front matter at the top.\n\n```yaml\n---\ntitle: \"Introduction to Quarto\"\nauthor: \"Jerid Francom\"\nformat: html\n---\n```\n\nWhen creating a Quarto document with RStudio the default attribute keys  are `title`, `author`, and `format`. The front matter is fenced by three dashes `---`.\n\nThe values for the first two keys are pretty straightforward and can be edited as needed. The value for the `format` attribute can also be edited to tell the `.qmd` file to generate other output types. Can you guess what value we might use to generate a PDF document? Yep, it's just `pdf`. As we work Quarto you will learn more about how to use the RStudio interface to change some of these key-value pairs and add others!\n\n##### Prose\n\nAnywhere below the front matter and not contained within a code block (see below) is open for prose. The prose section(s) have an added functionality in that they are Markdown aware. What does that mean, you say? Well, Markdown refers to a set of plain-text formatting conventions to produce formatted text in the output document. To quote [Wikipedia](https://en.wikipedia.org/wiki/Markdown):\n\n> Markdown is a lightweight markup language for creating formatted text using a plain-text editor. John Gruber and Aaron Swartz created Markdown in 2004 as a markup language that is appealing to human readers in its source code form. Markdown is widely used in blogging, instant messaging, online forums, collaborative software, documentation pages, and readme files.\n\nWhat this enables us to do is to add simple text conventions to signal how the output should be formatted. Say we want to make some text **bold**. We just add `**` around the text we want to appear bold.\n\n```markdown\n**bold text**\n```\n\nWe can also do:\n\n- *italics* `*italics*`\n- [links](http://wfu.edu) `[links](http://wfu.edu)`\n- ~~strikethrough~~ `~~strikethrough~~`\n- *etc.*\n\nFollow [this link find more information on basic Markdown syntax](https://quarto.org/docs/authoring/markdown-basics.html).\n\n##### Code blocks {#code-blocks}\n\nCode blocks are where the R magic happens. Again, referring to @fig-image-quarto-preview, we see that there is the following code block.\n\n```{{r}}\n1 + 1\n```\n\nA code block is bound by three backticks `` ``` ``. After the first backticks the curly brackets `{}` allow us to tell Quarto which programming language to use to evaluate (*i.e.* run) in the code block. In most cases this will be R, hence the the opening curly bracket `` `{r}` ``. But there are other languages that can be used in Quarto, such as Python, SQL, and Bash.\n\nIn the previous example, R is used as a simple calculator adding `1 + 1`. Here's what this code block produces.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n```{{r}}\n#| label: add\n1 + 1\n```\n\nWe have only mentioned selecting the coding language and labeling the code block, but [code blocks have various other options](https://quarto.org/docs/computations/r.html) that can be used to determine how the code block should be used. Some common code block options are:\n\n- hiding the code: `#| echo: false`\n\n```{{r}}\n#| label: add\n#| echo: false\n1 + 1\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n- hiding the output `#| include: false`\n\n```{{r}}\n#| label: add\n#| include: false\n1 + 1\n```\n\n- *etc.*\n\n#### Create and render a Quarto document\n\nThe easiest and most efficient way to create a Quarto source file is to use the RStudio point-and-click interface. Just use the toolbar to create a new file and select \"Quarto Document...\", as seen in @fig-image-quarto-create-1.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Creating a new Quarto document in RStudio.](images/quarto-create-1.png){#fig-image-quarto-create-1 width=1552}\n:::\n:::\n\n\nThis will provide you a dialogue box asking you to add a title and author to the document and also allows you to select the type of document format to output, as seen in @fig-image-quarto-create-2.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Dialogue box for creating a new Quarto document in RStudio.](images/quarto-create-2.png){#fig-image-quarto-create-2 width=1552}\n:::\n:::\n\n\nEnter a title and author and leave the format set to HTML.\n\nOn clicking 'Create' you will get a Quarto document, as in @fig-image-quarto-create-3, with some default/ boilerplate prose and code blocks. The prose and code blocks can be deleted, and we can start our own document.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Quarto source in RStudio.](images/quarto-create-3.png){#fig-image-quarto-create-3 width=1552}\n:::\n:::\n\n\nBut for now, let's leave things as they are and see how to generate the output report from this document. Click \"Render\" in the RStudio toolbar. Before it will render, you will be asked to save the file and give it a name.\n\nOnce you have done that the `.qmd` file will render in the format you have specified and open in the 'Viewer' pane, as seen in @fig-image-quarto-create-4.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Quarto source and HTML output side-by-side in RStudio.](images/quarto-create-4.png){#fig-image-quarto-create-4 width=1552}\n:::\n:::\n\n\n::: {.callout .halfsize}\n**{{< fa medal >}} Dive deeper**\n\nWatch [Getting Started with Quarto](https://www.youtube.com/watch?v=_f3latmOhew) for a guided tour of Quarto [@Cetinkaya-Rundel2023].\n:::\n\n## Check your understanding\n\n1. <select class='webex-select'><option value='blank'></option><option value='answer'>TRUE</option><option value=''>FALSE</option></select> Literate Programming, first introduced by Donald Knuth in 1984, allows the combination of computer code and text prose in one document.\n2. The programming paradigm Literate Programming is implemented through <select class='webex-select'><option value='blank'></option><option value='answer'>Quarto</option><option value=''>R</option><option value=''>RStudio</option><option value=''>GitHub</option></select>, a platform that facilitates the creation of a variety of output documents based on the same source code.\n3. Which of the following components does a basic Quarto document *not* contain? <select class='webex-select'><option value='blank'></option><option value=''>Front-matter section</option><option value=''>Prose section</option><option value='answer'>Back-matter section</option><option value=''>Code block</option></select>\n4. To generate a PDF document in Quarto, you can edit the format attribute value in the front-matter section to <input class='webex-solveme nospaces ignorecase' size='3' data-answer='[\"pdf\"]'/>.\n5. <select class='webex-select'><option value='blank'></option><option value='answer'>TRUE</option><option value=''>FALSE</option></select> The code block options `echo` and `include` can be used to hide the code and output, respectively.\n6. <select class='webex-select'><option value='blank'></option><option value=''>TRUE</option><option value='answer'>FALSE</option></select> In Quarto, a code block, where the programming language code is entered, is bounded by three underscores (`_`).\n\n## Lab preparation\n\nThis concludes our introduction to literate programming using Quarto. We have covered the basics there but there is much more to explore.\n\nIn preparation for [Lab 0](https://github.com/qtalr/lab-00), ensure that you have completed the following:\n\n- Setup your computing environment with R and RStudio\n- Installed the necessary packages:\n  - `quarto`\n  - `tinytex`\n\nand that you are prepared to do the following:\n\n- Open RStudio and understand the basic interface\n- Create, edit, and render Quarto documents\n- Use some basic Markdown syntax to format text\n\nWith this in mind, you are ready to move on to Lab 00.\n\n<!--\nTODO: possible options for accessing? Github clone and/ or Posit cloud, Dockerfile\n\nTODO: add instructions to Guide and/ or instructor's resources to outline approaches to using Git/GiHub, Docker, etc. for managing lab resources.\n-->\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}