{
  "hash": "4d833fb96aa568a0ddaa96ce243d7920",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"3. Descriptive assessment of datasets\"\nsubtitle: \"\"\ndescription: |\n  In this Recipe we will explore appropriate methods for summarizing variables in datasets given the number and informational values of the variable(s). We will build on our understanding of how to summarize data using statistics, tables, and plots.\ncategories: [recipes]\n---\n\n\n\n\n\n::: {.callout}\n**{{< fa regular list-alt >}} Skills**\n\n- Summary overviews of datasets with `skimr`\n- Summary statistics with `dplyr`\n- Creating Quarto tables with `knitr`\n- Creating Quarto plots with `ggplot2`\n:::\n\n## Concepts and strategies\n\nIn this Recipe, we will use the `PassiveBrownFam` dataset from the `corpora` package [@R-corpora]. This dataset contains information on the passive voice usage in the Brown family of corpora. The dataset contains 11 variables and 2,449 observations.\n\nI have assigned this dataset to the object `brown_fam_df` and have made minor modifications to the variable names to improve the readability of the dataset.\n\n<!-- [ ] code folding/ hiding? -->\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(dplyr)\n\n# Read the dataset from the `corpora` package\nbrown_fam_df <-\n  corpora::PassiveBrownFam |> # reference the dataset\n  as_tibble() # convert to a tibble\n\n# Rename variables\nbrown_fam_df <-\n  brown_fam_df |> # pass the original dataset\n  rename( # rename variables: new_name = old_name\n    lang_variety = lang,\n    num_words = n.words,\n    active_verbs = act,\n    passive_verbs = pass,\n    total_verbs = verbs,\n    percent_passive = p.pass\n  )\n\n# Preview\nglimpse(brown_fam_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n> Rows: 2,499\n> Columns: 11\n> $ id              <chr> \"brown_A01\", \"brown_A02\", \"brown_A03\", \"brown_A04\", \"b…\n> $ corpus          <fct> Brown, Brown, Brown, Brown, Brown, Brown, Brown, Brown…\n> $ section         <fct> A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, …\n> $ genre           <fct> press reportage, press reportage, press reportage, pre…\n> $ period          <fct> 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, …\n> $ lang_variety    <fct> AmE, AmE, AmE, AmE, AmE, AmE, AmE, AmE, AmE, AmE, AmE,…\n> $ num_words       <int> 2080, 2116, 2051, 2095, 2111, 2102, 2099, 2069, 2058, …\n> $ active_verbs    <int> 164, 154, 135, 128, 170, 166, 165, 163, 153, 169, 132,…\n> $ passive_verbs   <int> 40, 25, 34, 25, 32, 21, 31, 19, 39, 23, 17, 10, 15, 26…\n> $ total_verbs     <int> 204, 179, 169, 153, 202, 187, 196, 182, 192, 192, 149,…\n> $ percent_passive <dbl> 19.61, 13.97, 20.12, 16.34, 15.84, 11.23, 15.82, 10.44…\n```\n\n\n:::\n:::\n\n\nYou can learn more about these variables by reading the dataset documentation with `?corpora::PassiveBrownFam`.\n\n### Statistical overviews\n\nUnderstanding our data is of utmost importance before, during, and after analysis. After we get to know our data by inspecting the data origin, dictionary, and structure, we then move to summarizing the data.\n\nA statistical overview of the data is a good place to start as it gives us a sense of all of the variables and variable types in the dataset. We can use the `skimr` package to create a statistical overview of the data, using the very convienent `skim()` function.\n\nLet's create a statistical overview of the `brown_fam_df` dataset.\n\n<!-- [ ] skim output in rmd show a Table for part, fix -->\n\n```r\n# Load packages\nlibrary(skimr)\n\n# Create a statistical overview of the `brown_fam_df` dataset\nskim(brown_fam_df)\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# ── Data Summary ────────────────────────\n#                            Values      \n# Name                       brown_fam_df\n# Number of rows             2499        \n# Number of columns          11          \n# _______________________                \n# Column type frequency:                 \n#   character                1           \n#   factor                   5           \n#   numeric                  5           \n# ________________________               \n# Group variables            None        \n# \n# ── Variable type: character ────────────────────────────────────────────────────\n#   skim_variable n_missing complete_rate min max empty n_unique whitespace\n# 1 id                    0             1   7   9     0     2499          0\n# \n# ── Variable type: factor ───────────────────────────────────────────────────────\n#   skim_variable n_missing complete_rate ordered n_unique\n# 1 corpus                0             1 FALSE          5\n# 2 section               0             1 FALSE         15\n# 3 genre                 0             1 FALSE         15\n# 4 period                0             1 FALSE          3\n# 5 lang_variety          0             1 FALSE          2\n#   top_counts                            \n# 1 BLO: 500, Bro: 500, LOB: 500, FLO: 500\n# 2 J: 400, G: 381, F: 228, A: 220        \n# 3 lea: 400, bel: 381, pop: 228, pre: 220\n# 4 196: 1000, 199: 999, 193: 500         \n# 5 BrE: 1500, AmE: 999                   \n# \n# ── Variable type: numeric ──────────────────────────────────────────────────────\n#   skim_variable   n_missing complete_rate   mean    sd       p0     p25    p50\n# 1 num_words               0             1 2165.  97.8  1406     2127    2163  \n# 2 active_verbs            0             1  179.  56.6    39      139     170  \n# 3 passive_verbs           0             1   25.7 12.9     2       16      23  \n# 4 total_verbs             0             1  204.  49.1    66      170     196  \n# 5 percent_passive         0             1   14.0  9.13    0.612    7.39   12.1\n#      p75   p100 hist \n# 1 2200   4397   ▁▇▁▁▁\n# 2  214    551   ▃▇▂▁▁\n# 3   32     86   ▆▇▂▁▁\n# 4  234    571   ▃▇▂▁▁\n# 5   18.2   67.7 ▇▅▁▁▁\n```\n\n\n:::\n:::\n\n\nThe output of the `skim()` function contains a lot of information but it essentially has two parts: a summary of the dataset and a summary of each variable in the dataset. The summary of each of the variables, however, is grouped by variable type. Remember, each of our variables in a data frame is a vector and each vector has a type.\n\nWe have already learned about different types of vectors in R, including character, numeric, and logical. In this dataset, we are presented with a new type of vector: a factor. A factor is essentially a character vector that contains a set of discrete values, or levels. Factors can be ordered or unordered and can contain levels that are not present in the data.\n\nNow, looking at each of the variable types, we can see that we have 1 character variable, 5 factor variables, and 5 numeric variables. Each of these variable types assume a different set of summary statistics. For example, we can calculate the mean of a numeric variable but not of a character variable. Or, we can count the number of unique values in a character variable but not in a numeric variable.\n\nFor all variables, `skim()` will also provide the number of missing values and the percent of non-missing values.\n\nInspecting the entire dataset is a good place to start but at some point we often want focus in on a set of variables. We can add the `yank()` function to extract the statistical overview of a set of variables by their variable types.\n\nLet's extract the statistical overview of the numeric variables in the `brown_fam_df` dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract the statistical overview of the numeric variables\nbrown_fam_df |>\n  skim() |>\n  yank(\"numeric\")\n```\n:::\n\n\n```plain\n── Variable type: numeric ─────────────────────────────────────────────────────────────────────────\n  skim_variable   n_missing complete_rate   mean    sd       p0     p25    p50    p75   p100 hist\n1 num_words               0             1 2165.  97.8  1406     2127    2163   2200   4397   ▁▇▁▁▁\n2 active_verbs            0             1  179.  56.6    39      139     170    214    551   ▃▇▂▁▁\n3 passive_verbs           0             1   25.7 12.9     2       16      23     32     86   ▆▇▂▁▁\n4 total_verbs             0             1  204.  49.1    66      170     196    234    571   ▃▇▂▁▁\n5 percent_passive         0             1   14.0  9.13    0.612    7.39   12.1   18.2   67.7 ▇▅▁▁▁\n```\n\n### Summary statistics of particular variables\n\nThese summary statistics are useful but for a preliminary and interactive use, but it is oftent the case that we will want to focus in on a particular variable or set of variables and their potential relationships to other variables.\n\nWe can use the `dplyr` package to calculate summary statistics for a particular variable or set of variables. We can use the `group_by()` function to group the data by a particular variable or variables. Then we can use the `summarize()` function to calculate summary statistics for the grouped data.\n\nFor example, let's calculate the mean and median of the `percent_passive` variable in the `brown_fam_df` dataset grouped by the `lang_variety` variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Mean and median of `percent_passive` grouped by `lang_variety`\nbrown_fam_df |>\n  group_by(lang_variety) |>\n  summarize(\n    mean_percent_passive = mean(percent_passive),\n    median_percent_passive = median(percent_passive)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n> # A tibble: 2 × 3\n>   lang_variety mean_percent_passive median_percent_passive\n>   <fct>                       <dbl>                  <dbl>\n> 1 AmE                          12.9                   11.0\n> 2 BrE                          14.8                   13.3\n```\n\n\n:::\n:::\n\n\nThe result is a 2x3 data frame which includes both the mean and median of the `percent_passive` variable for each of the two levels of the `lang_variety` variable.\n\nThe `group_by()` function can also be used to group by multiple variables. For example, let's calculate the mean and median of the `percent_passive` variable in the `brown_fam_df` dataset grouped by the `lang_variety` and `genre` variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Mean and median of `percent_passive` grouped by\n# `lang_variety` and `genre`\nbrown_fam_df |>\n  group_by(lang_variety, genre) |>\n  summarize(\n    mean_percent_passive = mean(percent_passive),\n    median_percent_passive = median(percent_passive)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n> # A tibble: 30 × 4\n> # Groups:   lang_variety [2]\n>    lang_variety genre            mean_percent_passive median_percent_passive\n>    <fct>        <fct>                           <dbl>                  <dbl>\n>  1 AmE          press reportage                 11.5                   11.0 \n>  2 AmE          press editorial                 10.6                   10.1 \n>  3 AmE          press reviews                    9.54                   9.77\n>  4 AmE          religion                        14.3                   14.3 \n>  5 AmE          skills / hobbies                14.9                   13.9 \n>  6 AmE          popular lore                    14.0                   12.7 \n>  7 AmE          belles lettres                  12.0                   11.7 \n>  8 AmE          miscellaneous                   23.5                   23.3 \n>  9 AmE          learned                         21.3                   18.3 \n> 10 AmE          general fiction                  6.22                   5.89\n> # ℹ 20 more rows\n```\n\n\n:::\n:::\n\n\nFor numeric variables, such as `percent_passive`, there are a number of summary statistics that we can calculate. We've seen the R functions for mean and median but we can also calculate the standard deviation (`sd()`), variance (`var()`), minimum (`min()`), maximum (`max()`), interquartile range (`IQR()`), median absolute deviation (`mad()`), and quantiles (`quantile()`). All these calculations make sense for numeric variables but not for character variables.\n\nFor character variables, and factors, the summary statistics are more limited. We can calculate the number of observations (`n()`) and/ or the number of unique values (`n_distinct()`). Let's now summarize the number of observations `n()` grouped by the `genre` variable in the `brown_fam_df` dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Frequency table for `genre`\nbrown_fam_df |>\n  group_by(genre) |>\n  summarize(\n    n = n(),\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n> # A tibble: 15 × 2\n>    genre                n\n>    <fct>            <int>\n>  1 press reportage    220\n>  2 press editorial    135\n>  3 press reviews       85\n>  4 religion            85\n>  5 skills / hobbies   186\n>  6 popular lore       228\n>  7 belles lettres     381\n>  8 miscellaneous      150\n>  9 learned            400\n> 10 general fiction    145\n> 11 detective          120\n> 12 science fiction     30\n> 13 adventure          144\n> 14 romance            145\n> 15 humour              45\n```\n\n\n:::\n:::\n\n\nJust as before, we can add multiple grouping variables to `group_by()`. Let's add `lang_variety` to the grouping and calculate the number of observations `n()` grouped by the `genre` and `lang_variety` variables in the `brown_fam_df` dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cross-tabulation for `genre` and `lang_variety`\nbrown_fam_df |>\n  group_by(genre, lang_variety) |>\n  summarize(\n    n = n(),\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n> # A tibble: 30 × 3\n> # Groups:   genre [15]\n>    genre            lang_variety     n\n>    <fct>            <fct>        <int>\n>  1 press reportage  AmE             88\n>  2 press reportage  BrE            132\n>  3 press editorial  AmE             54\n>  4 press editorial  BrE             81\n>  5 press reviews    AmE             34\n>  6 press reviews    BrE             51\n>  7 religion         AmE             34\n>  8 religion         BrE             51\n>  9 skills / hobbies AmE             72\n> 10 skills / hobbies BrE            114\n> # ℹ 20 more rows\n```\n\n\n:::\n:::\n\n\n::: {.callout}\n**{{< fa regular hand-point-up >}} Tip**\n\nThe result of calculating the number of observations for a character or factor variable is known as a frequency table. Grouping two or more categorical variables is known as a cross-tabulation or a contingency table.\n:::\n\nNow, we can also pipe the results of a `group_by()` and `summarize()` to another function. This can be to say sort, select, or filter the results. It can also be to perform another summary function. It is important, however, to remember that the result of a `group_by()` produces a grouped data frame. Subsequent functions will be applied to the grouped data frame. This can lead to unexpected results if the original grouping is not relevant for the subsequent function. To avoid this, we can use the `ungroup()` function to remove the grouping after the relevant grouped summary statistics have been calculated.\n\nLet's return to calculating the number of observations `n()` grouped by the `genre` and `lang_variety` variables in the `brown_fam_df` dataset. But let's add another summary which uses the `n` variable to calculate the mean and median number of observations.\n\nIf we do not use the `ungroup()` function, the mean and median will be calculated for each `genre` collapsed across `lang_variety`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Mean and median of `n` grouped by `genre`\nbrown_fam_df |>\n  group_by(genre, lang_variety) |>\n  summarize(\n    n = n(),\n  ) |>\n  summarize(\n    mean_n = mean(n),\n    median_n = median(n)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n> # A tibble: 15 × 3\n>    genre            mean_n median_n\n>    <fct>             <dbl>    <dbl>\n>  1 press reportage   110      110  \n>  2 press editorial    67.5     67.5\n>  3 press reviews      42.5     42.5\n>  4 religion           42.5     42.5\n>  5 skills / hobbies   93       93  \n>  6 popular lore      114      114  \n>  7 belles lettres    190.     190. \n>  8 miscellaneous      75       75  \n>  9 learned           200      200  \n> 10 general fiction    72.5     72.5\n> 11 detective          60       60  \n> 12 science fiction    15       15  \n> 13 adventure          72       72  \n> 14 romance            72.5     72.5\n> 15 humour             22.5     22.5\n```\n\n\n:::\n:::\n\n\nTherefore we see that we have a mean and median calculated for the number of documents in the corpus for each of the 15 genres.\n\nIf we use the `ungroup()` function, the mean and median will be calculated for all genres. Note we will use the `ungroup()` function between these summaries to clear the grouping before calculating the mean and median.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Number of observations for each `genre` and `lang_variety`\nbrown_fam_df |>\n  group_by(genre, lang_variety) |>\n  summarize(\n    n = n(),\n  ) |>\n  ungroup() |>\n  summarize(\n    mean_n = mean(n),\n    median_n = median(n)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n> # A tibble: 1 × 2\n>   mean_n median_n\n>    <dbl>    <dbl>\n> 1   83.3       72\n```\n\n\n:::\n:::\n\n\nNow we see that we have a mean and median calculated across all genres.\n\n----\n\nBefore we leave this section, let's look some other ways to create frequency and contingency tables for character and factor variables. A shortcut to calculate a frequency table for a character or factor variable is to use the `count()` function from the `dplyr` package.\n\nLet's calculate the number of observations grouped by the `genre` variable in the `brown_fam_df` dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Frequency table for `genre`\nbrown_fam_df |>\n  count(genre)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n> # A tibble: 15 × 2\n>    genre                n\n>    <fct>            <int>\n>  1 press reportage    220\n>  2 press editorial    135\n>  3 press reviews       85\n>  4 religion            85\n>  5 skills / hobbies   186\n>  6 popular lore       228\n>  7 belles lettres     381\n>  8 miscellaneous      150\n>  9 learned            400\n> 10 general fiction    145\n> 11 detective          120\n> 12 science fiction     30\n> 13 adventure          144\n> 14 romance            145\n> 15 humour              45\n```\n\n\n:::\n:::\n\n\nWe can also add multiple grouping variables to `count()` and create contingency tables.\n\nLet's add `lang_variety` to the grouping and create a cross-tabulation for `genre` and `lang_variety` variables in the `brown_fam_df` dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cross-tabulation for `genre` and `lang_variety`\nbrown_fam_df |>\n  count(genre, lang_variety)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n> # A tibble: 30 × 3\n>    genre            lang_variety     n\n>    <fct>            <fct>        <int>\n>  1 press reportage  AmE             88\n>  2 press reportage  BrE            132\n>  3 press editorial  AmE             54\n>  4 press editorial  BrE             81\n>  5 press reviews    AmE             34\n>  6 press reviews    BrE             51\n>  7 religion         AmE             34\n>  8 religion         BrE             51\n>  9 skills / hobbies AmE             72\n> 10 skills / hobbies BrE            114\n> # ℹ 20 more rows\n```\n\n\n:::\n:::\n\n\nNote that the results of `count()` are not grouped so we do not need to use the `ungroup()` function before calculating subsequent summary statistics.\n\nAnother way to create frequency and contingency tables is to use the `tabyl()` function from the `janitor` package [@R-janitor]. Let's create a frequency table for the `genre` variable in the `brown_fam_df` dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(janitor)\n\n# Frequency table for `genre`\nbrown_fam_df |>\n  tabyl(genre)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n>             genre   n percent\n>   press reportage 220  0.0880\n>   press editorial 135  0.0540\n>     press reviews  85  0.0340\n>          religion  85  0.0340\n>  skills / hobbies 186  0.0744\n>      popular lore 228  0.0912\n>    belles lettres 381  0.1525\n>     miscellaneous 150  0.0600\n>           learned 400  0.1601\n>   general fiction 145  0.0580\n>         detective 120  0.0480\n>   science fiction  30  0.0120\n>         adventure 144  0.0576\n>           romance 145  0.0580\n>            humour  45  0.0180\n```\n\n\n:::\n:::\n\n\nIn addition to providing frequency counts, the `tabyl()` function also provides the percent of observations for each level of the variable. And, we can add up to three grouping variables to `tabyl()` as well.\n\nLet's add `lang_variety` to the grouping and create a contingency table for the `genre` and `lang_variety` variables in the `brown_fam_df` dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cross-tabulation for `genre` and `lang_variety`\nbrown_fam_df |>\n  tabyl(genre, lang_variety)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n>             genre AmE BrE\n>   press reportage  88 132\n>   press editorial  54  81\n>     press reviews  34  51\n>          religion  34  51\n>  skills / hobbies  72 114\n>      popular lore  96 132\n>    belles lettres 150 231\n>     miscellaneous  60  90\n>           learned 160 240\n>   general fiction  58  87\n>         detective  48  72\n>   science fiction  12  18\n>         adventure  57  87\n>           romance  58  87\n>            humour  18  27\n```\n\n\n:::\n:::\n\n\nThe results do not include the percent of observations for each level of the variable as it is not clear how to calculate the percent of observations for each level of the variable when there are multiple grouping variables. We must specify if we want to calculate the percent of observations by row or by column.\n\n::: {.callout}\n**{{< fa medal >}} Dive deeper**\n\nThe `janitor` package includes a variety of `adorn_*()` functions to add additional information to the results of `tabyl()`, including percentages, frequencies, and totals. Feel free to explore these functions on your own. We will return to this topic again later in the course.\n:::\n\n### Creating Quarto tables\n\nSummarizing the data is not only useful for our understanding of the data as part of our analysis but also for communicating the data in reports, manuscripts, and presentations.\n\nOne way to communicate summary statistics is with tables. In Quarto, we can use the `knitr` package [@R-knitr] in combination with code block options to produce formatted tables which we can cross-reference in our prose sections.\n\nLet's create an object from the cross-tabulation for the `genre` and `lang_variety` variables in the `brown_fam_df` dataset to work with.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cross-tabulation for `genre` and `lang_variety`\nbf_genre_lang_ct <-\n  brown_fam_df |>\n  tabyl(genre, lang_variety)\n```\n:::\n\n\nTo create a table in Quarto, we use the `kable()` function. The `kable()` function takes a data frame (or matrix) as an argument. The `format` argument will be derived from the Quarto document format ('html', 'pdf', *etc.*).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(knitr)\n\n# Create a table in Quarto\nkable(bf_genre_lang_ct)\n```\n\n::: {.cell-output-display}\n\n\n|genre            | AmE| BrE|\n|:----------------|---:|---:|\n|press reportage  |  88| 132|\n|press editorial  |  54|  81|\n|press reviews    |  34|  51|\n|religion         |  34|  51|\n|skills / hobbies |  72| 114|\n|popular lore     |  96| 132|\n|belles lettres   | 150| 231|\n|miscellaneous    |  60|  90|\n|learned          | 160| 240|\n|general fiction  |  58|  87|\n|detective        |  48|  72|\n|science fiction  |  12|  18|\n|adventure        |  57|  87|\n|romance          |  58|  87|\n|humour           |  18|  27|\n\n\n:::\n:::\n\n\nTo add a caption to the table and to enable cross-referencing, we use the code block options `label` and `tbl-cap`. The `label` option takes a label prefixed with `tbl-` to create a cross-reference to the table. The `tbl-cap` option takes a caption for the table, in quotation marks.\n\n```r\n#| label: tbl-brown-genre-lang-ct\n#| tbl-cap: \"Cross-tabulation of `genre` and `lang_variety`\"\n\n# Create a table in Quarto\nkable(bf_genre_lang_ct)\n```\n\nNow we can cross-reference the table with the `@tbl-brown-genre-lang-ct` syntax. So the following Quarto document will produce the following prose with a cross-reference to the formatted table output.\n\n````yaml\n\nAs we see in @tbl-brown-genre-lang-ct, the distribution of `genre` is similar across `lang_variety`.\n\n```{r}\n#| label: tbl-brown-genre-lang-ct\n#| tbl-cap: \"Cross-tabulation of `genre` and `lang_variety`\"\n\n# Print cross-tabulation\nkable(bf_genre_lang_ct)\n```\n\n````\n\n----\n\nAs we see in @tbl-brown-genre-lang-ct-example, the distribution of `genre` is similar across `lang_variety`.\n\n\n::: {#tbl-brown-genre-lang-ct-example .cell tbl-cap='Cross-tabulation of `genre` and `lang_variety`'}\n::: {.cell-output-display}\n\n\n|genre            | AmE| BrE|\n|:----------------|---:|---:|\n|press reportage  |  88| 132|\n|press editorial  |  54|  81|\n|press reviews    |  34|  51|\n|religion         |  34|  51|\n|skills / hobbies |  72| 114|\n|popular lore     |  96| 132|\n|belles lettres   | 150| 231|\n|miscellaneous    |  60|  90|\n|learned          | 160| 240|\n|general fiction  |  58|  87|\n|detective        |  48|  72|\n|science fiction  |  12|  18|\n|adventure        |  57|  87|\n|romance          |  58|  87|\n|humour           |  18|  27|\n\n\n:::\n:::\n\n\n----\n\n::: {.callout}\n**{{< fa medal >}} Dive deeper**\n\nThe `kableExtra` package [@R-kableExtra] provides additional functionality for formatting tables in Quarto.\n:::\n\n### Creating Quarto plots\n\nWhere tables are useful for communicating summary statistics for numeric and character variables, plots are useful for communicating relationships between variables especially when one or more of the variables is numeric. Furthermore, for complex relationships, plots can be more effective than tables.\n\nIn Quarto, we can use the `ggplot2` package [@R-ggplot2] in combination with code block options to produce formatted plots which we can cross-reference in our prose sections.\n\nLet's see this in action with a simple histogram of the `percent_passive` variable in the `brown_fam_df` dataset. The Quarto document will produce the following prose with a cross-reference to the formatted plot output.\n\n````yaml\nAs we see in @fig-brown-fam-percent-passive-hist, the distribution of `percent_passive` is skewed to the right.\n\n```{r}\n#| label: fig-brown-fam-percent-passive-hist\n#| fig-cap: \"Histogram of `percent_passive`\"\n\n# Create a histogram in Quarto\nggplot(brown_fam_df) +\n  geom_histogram(aes(x = percent_passive))\n```\n\n````\n\n----\n\nAs we see in @fig-ggplot2-brown-fam-percent-passive-hist-example, the distribution of `percent_passive` is skewed to the right.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Histogram of `percent_passive`](index_files/figure-html/fig-ggplot2-brown-fam-percent-passive-hist-example-1.png){#fig-ggplot2-brown-fam-percent-passive-hist-example width=672}\n:::\n:::\n\n\n----\n\nThe `ggplot2` package implements the 'Grammar of Graphics' approach to creating plots. This approach is based on the idea that plots can be broken down into components, or layers, and that each layer can be manipulated independently.\n\nThe main components are data, aesthetics, and geometries. Data is the data frame that contains the variables to be plotted. Aesthetics are the variables that will be mapped to the x-axis, y-axis (as well as color, shape, size, *etc.*). Geometries are the visual elements that will be used to represent the data, such as points, lines, bars, *etc.*.\n\nAs discussed in the R lesson \"Visual Summaries\", the `aes()` function is used to map variables to aesthetics and can be added to the `ggplot()` function or to the `geom_*()` function depending on whether the aesthetic is mapped to all geometries or to a specific geometry, respectively.\n\nTake a look at the following stages of the earlier plot in each of the tabs below.\n\n#### Stages\n\n::: {.panel-tabset}\n\n## Data\n\nThe data layer does not produce a plot but it is the foundation of the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data layer\nggplot(brown_fam_df)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot2-brown-fam-percent-passive-hist-data-1.png){width=672}\n:::\n:::\n\n\n## Aesthetics\n\nThe aesthetics layer does not produce a plot but it maps the variables to the aesthetics to be used in the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aesthetics layer\nggplot(brown_fam_df, aes(x = percent_passive))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot2-brown-fam-percent-passive-hist-aes-1.png){width=672}\n:::\n:::\n\n\n## Geometries\n\nThe geometries layer produces the plot connecting the data and aesthetics layers in the particular way specified by the geometries, in this case a histogram.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Geometries layer\nggplot(brown_fam_df, aes(x = percent_passive)) +\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot2-brown-fam-percent-passive-hist-geom-1.png){width=672}\n:::\n:::\n\n:::\n\n#### Choosing the right plot\n\nJust as with tables, the type of summary we choose to communicate with a plot depends on the type of variables we are working with and the relationships between those variables.\n\nBelow I've included a few examples of plots that can be used to communicate different types of variables and relationships.\n\n\n#### Single numeric variable\n\n::: {.panel-tabset}\n\n## Histogram\n\n::: {.cell}\n\n```{.r .cell-code}\n# Histogram\nggplot(brown_fam_df) +\n  geom_histogram(aes(x = percent_passive))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-single-hist-1.png){width=672}\n:::\n:::\n\n\n## Density plot\n\n::: {.cell}\n\n```{.r .cell-code}\n# Density plot\nggplot(brown_fam_df) +\n  geom_density(aes(x = percent_passive))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-single-density-1.png){width=672}\n:::\n:::\n\n:::\n\n#### Numeric and categorical variables\n\n::: {.panel-tabset}\n\n## Density plot\n\n::: {.cell}\n\n```{.r .cell-code}\n# Density plot\nggplot(brown_fam_df) +\n  geom_density(\n    aes(\n      x = percent_passive,\n      fill = lang_variety\n    ),\n    alpha = 0.5 # adds transparency\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-numeric-categorical-density-1.png){width=672}\n:::\n:::\n\n\n## Boxplot\n\n::: {.cell}\n\n```{.r .cell-code}\n# Boxplot\nggplot(brown_fam_df) +\n  geom_boxplot(\n    aes(\n      x = lang_variety,\n      y = percent_passive\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-numeric-categorical-boxplot-1.png){width=672}\n:::\n:::\n\n\n## Violin plot\n\n::: {.cell}\n\n```{.r .cell-code}\n# Violin plot\nggplot(brown_fam_df) +\n  geom_violin(\n    aes(\n      x = lang_variety,\n      y = percent_passive\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-numeric-categorical-violin-1.png){width=672}\n:::\n:::\n\n:::\n\n#### Two numeric variables\n\n::: {.panel-tabset}\n\n## Scatterplot\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scatterplot\nggplot(brown_fam_df) +\n  geom_point(\n    aes(\n      x = active_verbs,\n      y = passive_verbs\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-two-scatter-1.png){width=672}\n:::\n:::\n\n\n## Scatterplot with regression line\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scatterplot with regression line\nggplot(\n  brown_fam_df,\n  aes(\n    x = active_verbs,\n    y = passive_verbs\n  )\n) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-two-scatter-regression-1.png){width=672}\n:::\n:::\n\n:::\n\n#### Other variable combinations\n\nIn these examples, we have only looked at the most common variable combinations for one and two variable plots. There are more sophisticated plots that can be used for other variable combinations using `ggplot2`. For now, we will leave these for another time.\n\n## Check your understanding\n\n1. A factor is a character vector augmented to include information about the discrete values, or levels, of the vector. <select class='webex-select'><option value='blank'></option><option value='answer'>TRUE</option><option value=''>FALSE</option></select>\n2. What is the difference between a frequency table and a contingency table? <select class='webex-select'><option value='blank'></option><option value=''>A frequency table is a cross-tabulation of two or more categorical variables.</option><option value='answer'>A contingency table is a cross-tabulation of two or more categorical variables.</option></select>\n3. The <select class='webex-select'><option value='blank'></option><option value=''>skimr</option><option value=''>dplyr</option><option value=''>ggplot2</option><option value='answer'>knitr</option></select> package is used to create formatted tables in R.\n4. To add a geometry layer, such as `geom_histogram()`, to a ggplot object the `|>` operator is used. <select class='webex-select'><option value='blank'></option><option value=''>TRUE</option><option value='answer'>FALSE</option></select>\n5. To visualize the relationship between two numeric variables, a <select class='webex-select'><option value='blank'></option><option value=''>histogram</option><option value=''>density plot</option><option value=''>boxplot</option><option value=''>violin plot</option><option value='answer'>scatterplot</option></select> is often used.\n6. When the `aes()` function is added to the `ggplot()` function, the aesthetic is mapped to all geometries. <select class='webex-select'><option value='blank'></option><option value='answer'>TRUE</option><option value=''>FALSE</option></select>\n\n## Lab preparation\n\n<!-- Provide a checklist of knowledge and skills that learners should be comfortable with before beginning the lab -->\n\nBefore beginning [Lab 3](https://github.com/qtalr/lab-03), learners should be comfortable with the skills and knowledge developed in the previous recipes and labs. In this lab, you will have a chance to use these skills and those introduced in this Recipe to provide a descriptive assessment of a dataset that includes statistics, tables, and plots using Quarto and R.\n\nThe additional skills and knowledge you will need to complete Lab 3 include:\n\n- Summarizing data with `skimr`\n- Summarizing data with `dplyr`\n- Creating Quarto tables with `knitr`\n- Creating Quarto plots with `ggplot2`\n\n## References\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}